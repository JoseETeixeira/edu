// Complex test program for the edu language

import { add, subtract, MAX_VALUE } from "./mathUtils";

// Variable declarations with different types
int a = 10;
int b = 20;
float pi = 3.14159;
string greeting = "Hello, edu language!";

// Function to calculate factorial
int function factorial(int n) {
  if (n <= 1) {
    return 1;
  }
  return n * factorial(n - 1);
}

// Function to check if a number is prime
bool function isPrime(int num) {
  if (num <= 1) {
    return false;
  }
  if (num <= 3) {
    return true;
  }
  if (num % 2 == 0 || num % 3 == 0) {
    return false;
  }
  
  int i = 5;
  while (i * i <= num) {
    if (num % i == 0 || num % (i + 2) == 0) {
      return false;
    }
    i = i + 6;
  }
  
  return true;
}

// Class for mathematical operations
class MathUtils {
  constructor() {
    print("MathUtils initialized");
  }
  
  int function add(int x, int y) {
    return x + y;
  }
  
  int function subtract(int x, int y) {
    return x - y;
  }
  
  int function multiply(int x, int y) {
    return x * y;
  }
  
  float function divide(int x, int y) {
    if (y == 0) {
      print("Error: Division by zero");
      return 0.0;
    }
    return x / y;
  }
  
  int function power(int base, int exponent) {
    int result = 1;
    int i = 0;
    while (i < exponent) {
      result = result * base;
      i = i + 1;
    }
    return result;
  }
  
  // Compute the sum of numbers from 1 to n using a for loop
  int function sumNumbers(int n) {
    int sum = 0;
    for (int i = 1; i <= n; i = i + 1) {
      sum = sum + i;
    }
    return sum;
  }
  
  // Function to convert day number to name using a switch statement
  string function getDayName(int day) {
    string dayName = "";
    
    switch (day) {
      case 1:
        dayName = "Monday";
        break;
      case 2:
        dayName = "Tuesday";
        break;
      case 3:
        dayName = "Wednesday";
        break;
      case 4:
        dayName = "Thursday";
        break;
      case 5:
        dayName = "Friday";
        break;
      case 6:
        dayName = "Saturday";
        break;
      case 7:
        dayName = "Sunday";
        break;
      default:
        dayName = "Invalid day";
        break;
    }
    
    return dayName;
  }
}

// Function to calculate Fibonacci sequence using a for loop
int function fibonacci(int n) {
  if (n <= 0) {
    return 0;
  }
  if (n == 1 || n == 2) {
    return 1;
  }
  
  int a = 1;
  int b = 1;
  int result = 0;
  
  for (int i = 3; i <= n; i = i + 1) {
    result = a + b;
    a = b;
    b = result;
  }
  
  return result;
}

// Main function to test all features


// Define a base Shape class
class Shape {
  constructor() {
    print("Shape constructor called");
  }
  
  string function getType() {
    return "Generic Shape";
  }
  
  float function area() {
    print("Base area() method called");
    return 0.0;
  }
  
  string function describe() {
    return "This is a " + this.getType() + " with area: " + this.area();
  }
}

// Define a Rectangle class that extends Shape
class Rectangle extends Shape {
  float width;
  float height;
  
  constructor(float h, float w) {
    print("Rectangle constructor called");
    width = w;
    height = h;
  }
  
  string function getType() {
    return "Rectangle";
  }
  
  float function area() {
    return width * height;
  }
  
  float function perimeter() {
    return 2 * (width + height);
  }

  string function describe() {
    return "This is a " + this.getType() + " with area: " + this.area() + " and width:" + width ;
  }
}

// Test inheritance function
void function testInheritance() {
  print("\nTesting class inheritance:");
  
  // Create instances and test inheritance
  Shape genericShape = Shape();
  print("Generic Shape Type: " + genericShape.getType());
  print("Generic Shape Area: " + genericShape.area());
  print("Generic Shape Description: " + genericShape.describe());
  
  Rectangle rect = Rectangle(5.0, 3.0);
  print("Rectangle Type: " + rect.getType());  // Overridden method
  print("Rectangle Area: " + rect.area());     // Overridden method
  print("Rectangle Perimeter: " + rect.perimeter());  // New method
  print("Rectangle Description: " + rect.describe());  // Inherited method using overridden methods
}

// Call the test function
void function main() {
  // Test basic variable operations
  print(greeting);
  print("a + b = " + (a + b));
  
  // Test factorial function
  int fact5 = factorial(5);
  print("Factorial of 5 = " + fact5);
  
  // Test prime checker
  print("Is 17 prime? " + isPrime(17));
  print("Is 20 prime? " + isPrime(20));
  
  // Test MathUtils class
  MathUtils math = MathUtils();
  
  // Test arithmetic operations
  print("Addition: 15 + 7 = " + math.add(15, 7));
  print("Subtraction: 15 - 7 = " + math.subtract(15, 7));
  print("Multiplication: 15 * 7 = " + math.multiply(15, 7));
  print("Division: 15 / 7 = " + math.divide(15, 7));
  print("Power: 2^8 = " + math.power(2, 8));
  
  // Test division by zero handling
  print("Division by zero test: " + math.divide(10, 0));
  
  // Test for loop functions
  int sum10 = math.sumNumbers(10);
  print("Sum of numbers from 1 to 10 = " + sum10);
  
  // Test Fibonacci function with for loop
  print("Fibonacci(10) = " + fibonacci(10));
  
  // Test a simple for loop
  print("Counting from 1 to 5:");
  for (int i = 1; i <= 5; i = i + 1) {
    print("Count: " + i);
  }
  
  // Test switch statement with day names
  print("\nTesting switch statement with day names:");
  print("Day 1: " + math.getDayName(1));
  print("Day 3: " + math.getDayName(3));
  print("Day 5: " + math.getDayName(5));
  print("Day 7: " + math.getDayName(7));
  print("Day 10: " + math.getDayName(10)); // Should print "Invalid day"
  testInheritance();

  int x = 10;
  int y = 3;

  print("add:" + add(x, y));         // add: 13
  print("subtract:" + subtract(x, y)); // subtract: 7
  print("MAX_VALUE:" + MAX_VALUE); // MAX_VALUE: 100
}