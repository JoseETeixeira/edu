import os
#env = Environment(CXX='g++', CXXFLAGS=['-std=c++20'])
env = Environment(CXXFLAGS=['-std=c++2a'])

def find_tests_in_directory(directory):
    test_files = []
    for root, dirs, files in os.walk(directory):
        if '__tests__' in root:
            for file in files:
                if file.endswith('.cpp'):
                    test_files.append(os.path.join(root, file))
    return test_files

# Create the tests output directory if it doesn't exist
tests_output_dir = 'build/tests'
if not os.path.exists(tests_output_dir):
    os.makedirs(tests_output_dir)

# Path to the Google Test source
gtest_dir = 'lib/googletest'

# Compile Google Test source files directly instead of creating a library
gtest_src = Glob(os.path.join(gtest_dir, 'googletest/src/gtest-all.cc'))
gtest_objs = env.Object(gtest_src)

# Add Google Test include directory to the build
env.Append(CPPPATH=[os.path.join(gtest_dir, 'googletest/include'),
                    os.path.join(gtest_dir, 'googletest')])


test_files = find_tests_in_directory('src')

# Link Google Test object files directly with your test files
gtest_main_src = Glob(os.path.join(gtest_dir, 'googletest/src/gtest_main.cc'))
gtest_main_obj = env.Object(gtest_main_src)

# Include debug.cpp and binary_expression_fix.cpp in the test build
common_src = ['src/debug.cpp', 'src/codegen/binary_expression_fix.cpp']

# Now include these files in the Program call for tests
env.Program(target=os.path.join(tests_output_dir, 'runTests'),
            source=test_files + gtest_objs + gtest_main_obj + common_src)

# Build the main program with direct interpreter functionality
main_source = ['src/main.cpp', 
               'src/codegen/binary_expression_fix.cpp', 
               'src/debug.cpp',
               'src/interpreter/interpreter.cpp']  # Add the interpreter implementation
env.Program(target='build/edu', source=main_source)
